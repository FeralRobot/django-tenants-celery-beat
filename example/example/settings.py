"""
Django settings for example project.

Generated by 'django-admin startproject' using Django 3.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "%dt6pg*c3-z09wu(7r3e4h745bf^bj2hj@yd(rokm$g7!fr5m7"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Application definition

DATABASE_ROUTERS = ("django_tenants.routers.TenantSyncRouter",)

INSTALLED_APPS = [
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

SHARED_APPS = (
    "django_tenants",  # mandatory
    "tenancy",  # you must list the app where your tenant model resides in
    "django.contrib.contenttypes",
    # everything below here is optional
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.sessions",
    "django_celery_results",
    "django_celery_beat",
    "django_tenants_celery_beat",
)

TENANT_APPS = (
    # The following Django contrib apps must be in TENANT_APPS
    "django.contrib.contenttypes",
    # your tenant-specific apps
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.sessions",
    "django_celery_results",
    "core",
)

INSTALLED_APPS += list(SHARED_APPS) + [
    app for app in TENANT_APPS if app not in SHARED_APPS
]

TENANT_MODEL = "tenancy.Tenant"

TENANT_DOMAIN_MODEL = "tenancy.Domain"

PERIODIC_TASK_TENANT_LINK_MODEL = "tenancy.PeriodicTaskTenantLink"

TENANT_TIMEZONE_DISPLAY_GMT_OFFSET = False

DEFAULT_AUTO_FIELD = "django.db.models.AutoField"

ALLOWED_HOSTS = ["*"]

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        "LOCATION": "cachetable",
        "KEY_PREFIX": "local_david",
        "KEY_FUNCTION": "django_tenants.cache.make_key",
    }
}

CELERY_TASK_TENANT_CACHE_SECONDS = 60 * 60 * 24

MIDDLEWARE = [
    "django_tenants.middleware.main.TenantMainMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "example.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.template.context_processors.debug",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "example.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django_tenants.postgresql_backend",
        "NAME": "django-tenants-celery-beat",
        "HOST": "localhost",
        "PORT": "5432",
        "USER": "postgres",
        "PASSWORD": "postgres",
    },
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = "/static/"

# Celery

broker_dir = BASE_DIR / ".broker"
CELERY_BROKER_URL = "filesystem://"
CELERY_BROKER_TRANSPORT_OPTIONS = {
    "data_folder_in": broker_dir / "out",
    "data_folder_out": broker_dir / "out",
    "data_folder_processed": broker_dir / "processed",
}

CELERY_RESULT_BACKEND = "django-db"
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"

os.makedirs(CELERY_BROKER_TRANSPORT_OPTIONS["data_folder_out"], exist_ok=True)
os.makedirs(CELERY_BROKER_TRANSPORT_OPTIONS["data_folder_processed"], exist_ok=True)
# TO CREATE A CELERY WORKER WHEN TESTING LOCALLY RUN THIS IN THE PROJECT FOLDER:
# celery -A example worker --loglevel=info --pool=solo
# TO CREATE A CELERY BEAT SERVICE WHEN TESTING LOCALLY RUN THIS IN THE PROJECT FOLDER:
# celery -A example beat --loglevel=info
